<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/11/23
 * Time: 16:18
 */

namespace app\admin\controller;
use app\admin\model\Config;
use app\admin\model\SiteEntrance;
use think\Db;


/**
 * 快捷入口
 * Class Entrance
 * @package app\admin\controller
 */
class Entrance extends Base
{
    /**
     *
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->entrance = Db::table('ecshecom_site_entrance');
    }
    public function index(){

        $list = model('admin/SiteEntrance')
                    ->alias('t')
                    ->field('id,name,belong_type,url,icon,order,status,created_at')
                    ->where(['is_deleted' => SiteEntrance::DEL_NO ])
                    ->order('order DESC,id ASC')
                    ->select();

        $site_entrance_show = Config::getVal('HOME_ENTRANCE_SHOW');//SiteConfig::model()->find("config_name='HOME_ENTRANCE_SHOW'");

        foreach($list as $k=>$v)
        {
            $list[$k]['belong_type'] = SiteEntrance::$types[$v['belong_type']];
        }




        $this->render("list",array(
            'list'=>$list,
            'site_entrance_show'=>$site_entrance_show->config_value,
        ));
    }
    //列表
    public function entlist()
    {
        if ($this->request->isAjax()) {
            $page = input('get.page/d', 1);
            $limit = input('get.limit/d', 20);
            $title = request()->param('title');
            $status = request()->param('status');
            $position = request()->param('position');

            $map[] = ['is_deleted', '<>', 1];

            if($status==""){

            }else{
                $map[] = ['status', 'eq', (int)$status];
            }

            if(!empty($title)){
                $map[] = ['name', 'like', "%$title%"];
            }
            if(!empty($position)){
                $zfList = $this->entrance
                    ->where($map)
                    ->where('position & '.$position)
                    ->page($page, $limit)
                    ->order('created_at desc')
                    ->select();
            }else{
                $zfList = $this->entrance
                    ->where($map)
                    ->page($page, $limit)
                    ->order('created_at desc')
                    ->select();
            }
           // print_r(model('api/SiteEntrance')->getLastSql());exit;
            foreach($zfList as $key=>$val){
                $zfList[$key]['status'] = isset(SiteEntrance::$status_config[$val['status']])?SiteEntrance::$status_config[$val['status']]:'';
                $zfList[$key]['created_at']=date('Y-m-d H:i:s',$zfList[$key]['created_at']);
            }
            $count = $this->entrance->where($map)->count();
            $data = [
                'code' => 0,
                'msg' => '数据返回成功',
                'count' => $count,
                'data' => $zfList
            ];
            return json($data);
        }

        $position_type_list = SiteEntrance::$position_config;
        $this->assign('position_type_list', $position_type_list);
        return $this->fetch('entrance_list');
    }
    public function delEntrance()
    {
        $ids = array_unique(input('post.id/a', []));
        foreach ($ids as $val) {
            $rs = Db::table('ecshecom_site_entrance')->where('id', $val)->delete();
        }
        unset($val);
        $this->success('删除成功');
    }
    public function entranceForm(){
        if ($this->request->isPost()) {
            $data = input('post.', []);
            $title = $data['id'] ? '编辑' : '新增';
            $data['is_need_login'] = (isset($data['is_need_login']) ? '1' : '0');
            $data['is_need_auth'] = (isset($data['is_need_auth']) ? '1' : '0');
            $data['position'] = array_sum($data['position']);

            if ($data['id']) {     //编辑
                $rs = $this->entrance->update($data);
            }else{
                $data['created_at']=time();
                $rs = $this->entrance->insert($data);
            }
            if ($rs) {
                $this->success($title . '成功');
            } else {
                $this->error($title . '失败');
            }
        } else {
            $aid = input('get.aid/d', 0);
            $info = $this->entrance->where('id='.$aid)->find($aid);
            $this->assign('info', $info);
            return $this->fetch();
        }
    }
    //上传
    public function uploadImg(){
        $path = "static/upload/";//上传路径
        $typeArr = array("jpg", "png", "gif",'jpeg');
        if (isset($_POST)) {
            $name = $_FILES['file']['name'];
            $size = $_FILES['file']['size'];
            $name_tmp = $_FILES['file']['tmp_name'];
            if (empty($name)) {
                return Json(['error'=>'您还未选择图片']);
                exit;
            }
            $type = strtolower(substr(strrchr($name, '.'), 1)); //获取文件类型

            if (!in_array($type, $typeArr)) {
                return Json(['error'=>'请上传jpg,png或gif类型的图片']);
                exit;
            }
            if ($size > (1024 * 1024 * 10)) {
                return Json(['error'=>'图片大小已超过10MB！']);
                exit;
            }

            $pic_name = time() . rand(10000, 99999) . "." . $type;//图片名称
            $pic_url = $path . $pic_name;//上传后图片路径+名称
            if(!is_dir($path)){
                mkdir($path,0777,true);
            }
            if (move_uploaded_file($name_tmp, $pic_url)) { //临时文件转移到目标文件夹
                $url='/'.$pic_url;
                return Json(['code'=>'0','url'=>$url]);

            } else {
                return Json(['code'=>'1']);
            }
        }
    }
}