<?php
/**----------------------------------------------------------------------
 * OpenCenter V3
 * Copyright 2014-2018 http://www.ocenter.cn All rights reserved.
 * ----------------------------------------------------------------------
 * Author: wdx(wdx@ourstu.com)
 * Date: 2018/9/28
 * Time: 14:39
 * ----------------------------------------------------------------------
 */

namespace app\admin\controller;

use app\admin\validate\UserRole;
use app\admin\validate\UserRule;
use app\admin\model\UserCoin;
use app\admin\model\UserReal;
use app\admin\model\UserRequire;
use app\admin\model\UserBank;
use app\admin\model\AdminLog;
use app\admin\model\User AS AdminUser;
use app\admin\model\UserCoinAddress;
use app\common\component\Openim;
use think\Db;
use app\admin\model\User as UserModel;
use app\admin\model\Contact;

/**
 * Class User
 * 用户控制器类
 * @package app\admin\controller
 */
class User extends Base
{
    protected $user;
    protected $config;
    protected $userRule;
    protected $userRole;
    protected $userLog;
    protected $userCount;
    protected $scoreType;
    protected $scoreLog;
    protected $userReal;
    protected $userRequire;
    protected $userContact;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->config = model('admin/Config');
        $this->userRule = model('admin/UserRule');
        $this->user = model('admin/User');
        $this->userRole = model('admin/userRole');
        $this->userReal = model('admin/userReal');
        $this->userLog = model('admin/userLog');
        $this->userCount = model('admin/userCount');
        $this->userRequire = model('admin/userRequire');
        $this->userContact = model('admin/userContact');
    }

    /**
     * 注册配置
     * @return mixed
     * @author:wdx(wdx@ourstu.com)
     */
    public function registerConfig()
    {
        if ($this->request->isPost()) {
            cache('LYS-YCG-COMMON-CONFIG',null);
            $data = input('data/a', []);
            $res = $this->config->saveConfig($data);
            if ($res) {
                AdminLog::setTitle('注册配置设置成功');
                //重置当前缓存
                $newData = array();
                foreach ($data as $k => $v){
                    $newData[] = $k;
                }
                $configs = $this->config->where(['status'=>1])
                    ->where(['name'=>$newData])
                    ->field('name,value')
                    ->select();
                if( !empty($configs) )
                {
                    $cfg = [];
                    foreach( $configs as $config )
                    {
                        $cfg[$config['name']] = $config['value'];
                    }
                    if( !empty($cfg) )
                    {
                        cache('LYS-YCG-COMMON-CONFIG',$cfg);
                    }
                }
                $this->success('设置成功');
            } else {
                AdminLog::setTitle('注册配置设置失败');
                $this->error('设置失败');
            }
        } else {
            $config = $this->config->queryConfig();
            if($config['system_logo'] != '')
            {
                $config['system_logo'] = str_replace('["','',$config['system_logo']);
                $config['system_logo'] = str_replace('"]','',$config['system_logo']);
            }
            $this->assign('config', $config);
            return $this->fetch();
        }
    }

    /**
     * 短信配置
     * @return mixed
     * @author:wangjun
     */
    public function messageConfig()
    {
        if ($this->request->isPost()) {
            cache('LYS-YCG-COMMON-CONFIG',null);
            $data = input('data/a', []);
            $res = $this->config->saveConfig($data);
            if ($res) {
                AdminLog::setTitle('简讯配置设置成功');
                //重置当前缓存
                $newData = array();
                foreach ($data as $k => $v){
                    $newData[] = $k;
                }
                $configs = $this->config->where(['status'=>1])
                    ->where(['name'=>$newData])
                    ->field('name,value')
                    ->select();
                if( !empty($configs) )
                {
                    $cfg = [];
                    foreach( $configs as $config )
                    {
                        $cfg[$config['name']] = $config['value'];
                    }
                    if( !empty($cfg) )
                    {
                        cache('LYS-YCG-COMMON-CONFIG',$cfg);
                    }
                }
                $this->success('设置成功');
            } else {
                AdminLog::setTitle('短信配置设置失败');
                $this->error('设置失败');
            }
        }

        $config = $this->config->queryConfig();
        $this->assign('config', $config);
        return $this->fetch();
    }

    /**
     * 消息推送配置
     * @return mixed
     * @author:wangjun
     */
    public function pushConfig()
    {
        if ($this->request->isPost()) {
            cache('LYS-YCG-COMMON-CONFIG',null);
            $data = input('data/a', []);
            $res = $this->config->saveConfig($data);
            if ($res) {
                AdminLog::setTitle('消息推送配置成功');
                //重置当前缓存
                $newData = array();
                foreach ($data as $k => $v){
                    $newData[] = $k;
                }
                $configs = $this->config->where(['status'=>1])
                    ->where(['name'=>$newData])
                    ->field('name,value')
                    ->select();
                if( !empty($configs) )
                {
                    $cfg = [];
                    foreach( $configs as $config )
                    {
                        $cfg[$config['name']] = $config['value'];
                    }
                    if( !empty($cfg) )
                    {
                        cache('LYS-YCG-COMMON-CONFIG',$cfg);
                    }
                }
                $this->success('设置成功');
            } else {
                AdminLog::setTitle('消息推送配置失败');
                $this->error('设置失败');
            }
        }

        $config = $this->config->queryConfig();
        $this->assign('config', $config);
        return $this->fetch();
    }

    /**
     * 用户权限列表
     * @return mixed|\think\response\Json
     * @author:wdx(wdx@ourstu.com)
     */
    public function userAuth()
    {
        if ($this->request->isAjax()) {
            $page = input('get.page/d', 1);
            $limit = input('get.limit/d', 20);
            $map[] = ['status', '>=', 0];
            //用户权限列表
            $userAuthList = $this->userRule->getList($map, $page, $limit);
            //父级权限列表
            $userParentAuthTitle= $this->userRule->getParentTitle();
            foreach ($userAuthList as &$val) {
                to_status($val);
                $val['ptitle'] = ($val['pid'] ? $userParentAuthTitle[$val['pid']] : '-');
            }
            unset($val);
            $count = $this->userRule->where($map)->count();
            $data = [
                'code' => 0,
                'msg' => '数据返回成功',
                'count' => $count,
                'data' => $userAuthList
            ];
            AdminLog::setTitle('获取用户权限列表');
            return json($data);
        }
        AdminLog::setTitle('用户权限列表');
        return $this->fetch();
    }

    /**
     * 删除用户权限
     * @author:wdx(wdx@ourstu.com)
     */
    public function delUserAuth()
    {
        $ids = array_unique(input('post.id/a', []));
        foreach ($ids as $val) {
            $isParent = $this->userRule->where('id', $val)->value('pid');
            $existSon = $this->userRule->where('pid', $val)->where('status', 1)->find();
            if (!$isParent && $existSon) {
                $this->error('存在可用子权限，刪除失败');
            } else {
                $rs = $this->userRule->where('id', $val)->setField('status', '-1');
                if (!$rs) {
                    $this->error('刪除失败');
                }
            }
        }
        unset($val);
        AdminLog::setTitle('刪除用户权限');
        $this->success('刪除成功');
    }

    /**
     * 用户新增与编辑
     * @return mixed
     * @author:wdx(wdx@ourstu.com)
     */
    public function userEditForm()
    {
        if ($this->request->isPost()) {
            $data = input('post.data/a', []);
            $title = $data['id'] ? '编辑' : '新增';

            //验证手机号码
            if(!is_mobile_phone($data['moble']))
            {
                AdminLog::setTitle($title . '手机号码错误');
                $this->error($title . '手机号码错误');
            }

            if($data['id']) //编辑
            {
                $mobleWhere[] = ['moble','=',$data['moble']];
                $mobleWhere[] = ['id','<>',$data['id']];
                $hasMoble = Db::name('user')->where($mobleWhere)->find();

                if(isset($hasMoble))
                {
                    AdminLog::setTitle('该手机号码已存在!');
                    $this->error('该手机号码已存在!');
                }
                $res = Db::name('user')->update($data);
            } else { //新增

                $hasMoble = Db::name('user')->where(['moble'=>$data['moble']])->find();
                if(isset($hasMoble))
                {
                    AdminLog::setTitle('该手机号码已存在!');
                    $this->error('该手机号码已存在!');
                }

                //登录和支付密码设置
                $password = '123456'; //默认密码
                $newPw = array();
                $newPw['rd'] = tradenoa();
                $newPw['pw'] = md5($newPw['rd'] . md5($password) . $newPw['rd']);
                $newPw['addtime'] = time();

                $data['addtime'] = time();
                $data['status'] = 1;
                $data['level'] = 2;

                $userId = Db::name('user')->insertGetId($data); //插入用户

                //保存登录密码
                $newPw['userid'] = $userId;
                $res = Db::name('user_key')->insert($newPw);
            }

            if ($res) {
                AdminLog::setTitle($title . '用户操作成功');
                $this->success($title . '用户操作成功');
            } else {
                AdminLog::setTitle($title . '用户操作失败');
                $this->error($title . '用户操作失败');
            }
        } else {
            $id = input('get.id/d', 0);
            $user = $this->user->find($id);
            //所有可用角色
            $roles = Db::name('user_role')->where(['status'=>1])->field("id,name")->select();
            $this->assign([
                'user' => $user,
                'roles' => $roles,
            ]);
            return $this->fetch();
        }
    }

    /**
     * 用户权限新增与编辑
     * @return mixed
     * @author:wdx(wdx@ourstu.com)
     */
    public function userAuthForm()
    {
        if ($this->request->isPost()) {
            $data = input('post.data/a', []);
            $title = $data['id'] ? '编辑' : '新增';
            $data['module'] = strtolower($data['module']);
            $data['name'] = strtolower($data['name']);
            $data['status'] = isset($data['status']) ? 1 : 0;
            //自动验证
            $validate = new UserRule();
            if (!$validate->check($data)) {
                $this->error($validate->getError());
            }

            $data['verify'] = 0; //默认为0
            if ($data['id']) {
                $res = $this->userRule->update($data);
            } else {
                $res = $this->userRule->insert($data);
            }
            if ($res) {
                AdminLog::setTitle($title . '用户权限成功');
                $this->success($title . '用户权限成功');
            } else {
                AdminLog::setTitle($title . '用户权限失败');
                $this->error($title . '用户权限失败');
            }
        } else {
            $id = input('get.id/d', 0);
            $rule = $this->userRule->find($id);
            $userRuleTree = $this->userRule->getTree('id, pid, title');
            $this->assign('rule', $rule);
            $this->assign('userRuleTree', $userRuleTree);
            return $this->fetch();
        }
    }

    /**
     * 用户需求列表
     * @return mixed|\think\response\Json
     * @author:wdx(wdx@ourstu.com)
     */
    public function useRequire()
    {
        if ($this->request->isAjax()) {
            $page = input('get.page/d', 1);
            $limit = input('get.limit/d', 20);
            $map[] = ['status', '>=', 0];
            //用户权限列表
            $userAuthList = $this->userRequire->getList($map, $page, $limit);
            //父级权限列表
            $userParentAuthTitle= $this->userRequire->getParentTitle();
            foreach ($userAuthList as &$val) {
                to_status($val);
                $val['ptitle'] = ($val['pid'] ? $userParentAuthTitle[$val['pid']] : '-');
            }
            unset($val);
            $count = $this->userRequire->where($map)->count();
            $data = [
                'code' => 0,
                'msg' => '数据返回成功',
                'count' => $count,
                'data' => $userAuthList
            ];
            AdminLog::setTitle('获取用户认证需求列表');
            return json($data);
        }
        AdminLog::setTitle('用户认证需求列表');
        return $this->fetch();
    }

    /**
     * 删除用户需求
     * @author:wdx(wdx@ourstu.com)
     */
    public function delUseRequire()
    {
        $ids = array_unique(input('post.id/a', []));
        foreach ($ids as $val) {
            $isParent = $this->userRequire->where('id', $val)->value('pid');
            $existSon = $this->userRequire->where('pid', $val)->where('status', 1)->find();
            if (!$isParent && $existSon) {
                $this->error('存在可用子认证需求，刪除失败');
            } else {
                $rs = $this->userRequire->where('id', $val)->setField('status', '-1');
                if (!$rs) {
                    $this->error('刪除失败');
                }
            }
        }
        unset($val);
        AdminLog::setTitle('刪除用户权限');
        $this->success('刪除成功');
    }

    /**
     * 用户需求新增与编辑
     * @return mixed
     * @author:wdx(wdx@ourstu.com)
     */
    public function useRequireForm()
    {
        if ($this->request->isPost()) {
            $data = input('post.data/a', []);
            $title = $data['id'] ? '编辑' : '新增';
            $data['module'] = strtolower($data['module']);
            $data['name'] = strtolower($data['name']);
            $data['status'] = isset($data['status']) ? 1 : 0;
            //自动验证

            $data['verify'] = 0; //默认为0
            if ($data['id']) {
                $res = $this->userRequire->update($data);
            } else {
                $res = $this->userRequire->insert($data);
            }
            if ($res) {
                AdminLog::setTitle($title . '用户认证需求成功');
                $this->success($title . '用户认证需求成功');
            } else {
                AdminLog::setTitle($title . '用户认证需求失败');
                $this->error($title . '用户认证需求失败');
            }
        } else {
            $id = input('get.id/d', 0);
            $rule = $this->userRequire->find($id);
            $userRuleTree = $this->userRequire->getTree('id, pid, title');
            $this->assign('rule', $rule);
            $this->assign('userRuleTree', $userRuleTree);
            return $this->fetch();
        }
    }

    /**
     * 用户角色列表
     * @return mixed|\think\response\Json
     * @author:wdx(wdx@ourstu.com)
     */
    public function userRole()
    {
        if ($this->request->isAjax()) {
            $page = input('get.page/d', 1);
            $limit = input('get.limit/d', 20);
            $map[] = ['status', '>=', 0];
            $pRole = $this->userRole->where('status', 1)->column('title', 'id');
            $pRole[0] = '顶级角色组';
            $userRoleList = $this->userRole->where($map)->page($page, $limit)->select()->toArray();
            $count = $this->userRole->where($map)->count();
            foreach ($userRoleList as &$val) {
                to_status($val);
                $val['pid'] = $pRole[$val['pid']] . '[' . $val['pid'] . ']';
            }
            unset($val);
            $data = [
                'code' => 0,
                'msg' => '数据返回成功',
                'count' => $count,
                'data' => $userRoleList
            ];
            AdminLog::setTitle('获取用户角色列表');
            return json($data);
        }
        AdminLog::setTitle('用户角色列表');
        return $this->fetch();
    }

    /**
     * 用户角色表单
     * @return mixed
     * @author:wdx(wdx@ourstu.com)
     */
    public function userRoleForm()
    {
        if ($this->request->isPost()) {
            $data = input('');
            $data['title'] = $data['name'];
            $title = isset($data['id']) ? '编辑' : '新增';
            $data['status'] = (isset($data['status']) ? 1 : 0);

            if ($data['id']) {
                $res = $this->userRole->update($data);
            } else {
                $res = $this->userRole->insert($data);
            }
            if ($res) {
                AdminLog::setTitle($title . '用户角色成功');
                $this->success($title . '用户角色成功');
            } else {
                AdminLog::setTitle($title . '用户角色失败');
                $this->error($title . '用户角色失败');
            }
        } else {
            $id = input('get.id/d', 0);
            $role = $this->userRole->find($id);
            $roles = config("config.userRole");
            $this->assign([
                'role' => $role,
                'roles' => $roles
            ]);
            return $this->fetch();
        }
    }

    /**
     * 获取用户权限节点树
     * @author:wdx(wdx@ourstu.com)
     */
    public function getUserAuthTree()
    {
        $id = input('id/d', 0);
        $rules = $this->userRole->where('id', $id)->value('rules');
        if ($rules !== '*') {
            $rules = explode(',', $rules);
        }
        $map[] = ['status', '>=', 0];
        /* 获取所有分类 */
        $list = $this->userRule->field('id, pid, title')->where($map)->order('sort')->select()->toArray();
        foreach ($list as $key => &$val) {
            $val['name'] = $val['title'];
            unset($val['title']);
            $val['value'] = $val['id'];
            if ($rules === '*' || in_array($val['id'], $rules)) {
                $val['checked'] = true;
            } else {
                $val['checked'] = false;
            }
        }
        unset($val);
        $adminAuth = $this->userRule->getAuthTree($list);
        $trees = ['trees' => $adminAuth];
        $data = [
            'code' => 0,
            'msg' => '获取成功',
            'data' => $trees
        ];
        return json($data);
    }

    /**
     * 获取用户需求节点树
     * @author:wdx(wdx@ourstu.com)
     */
    public function getUserRequireTree()
    {
        $id = input('id/d', 0);
        $rules = $this->userRole->where('id', $id)->value('requires');
        if ($rules !== '*') {
            $rules = explode(',', $rules);
        }
        $map[] = ['status', '>=', 0];
        /* 获取所有分类 */
        $list = $this->userRequire->field('id, pid, title')->where($map)->order('sort')->select()->toArray();
        foreach ($list as $key => &$val) {
            $val['name'] = $val['title'];
            unset($val['title']);
            $val['value'] = $val['id'];
            if ($rules === '*' || in_array($val['id'], $rules)) {
                $val['checked'] = true;
            } else {
                $val['checked'] = false;
            }
        }
        unset($val);
        $adminAuth = $this->userRule->getAuthTree($list);
        $trees = ['trees' => $adminAuth];
        $data = [
            'code' => 0,
            'msg' => '获取成功',
            'data' => $trees
        ];
        return json($data);
    }

    /**
     * 删除用户角色
     * @author:wdx(wdx@ourstu.com)
     */
    public function delUserRole()
    {
        $ids = array_unique(input('post.id/a', []));
        foreach ($ids as $val) {
            if ($val == 1 || $val == 2) {
                $this->error('禁止删除普通用户或游客分组');
            }
            if ($this->userRole->where('pid', $val)->where('status', 1)->find()) {
                $this->error('该角色分类下存在子角色，删除失败');
            }
            $rs = $this->userRole->where('id', $val)->setField('status', '-1');
            if (!$rs) {
                $this->error('删除失败');
            }
        }
        unset($val);
        AdminLog::setTitle('删除用户角色');
        $this->success('删除成功');
    }

    /**
     * 用户列表
     * @return mixed|\think\response\Json
     * @author:wdx(wdx@ourstu.com)
     */
    public function userList()
    {
        if ($this->request->isAjax()) {
            $page = input('get.page/d', 1);
            $limit = input('get.limit/d', 20);
            $username = request()->param('username');
            $map = [];
            if($username != '')
            {
                $map['username'] = $username;
            }

            $userList = $this->user->where($map)->page($page, $limit)->order('id desc')->select()->toArray();
            $count = $this->user->where($map)->count();
            for ($a=0;$a<count($userList);$a++) {
                $realStatus = UserReal::where(['userid'=>$userList[$a]['id']])->field('status,name')->find();
                if(!$realStatus)
                {
                    $isReal = -1;
                } else {
                    $isReal = $realStatus['status'];
                }

                switch ($isReal)
                {
                    case -1:
                        $userList[$a]['is_real_text'] = '未实名';
                        break;
                    case 0:
                        $userList[$a]['is_real_text'] = '审核中';
                        break;
                    case 1:
                        $userList[$a]['is_real_text'] = '审核成功';
                        break;
                    case 2:
                        $userList[$a]['is_real_text'] = '审核驳回';
                        break;
                    default:
                        $userList[$a]['is_real_text'] = '未实名';
                }

                if($userList[$a]['status'] == 1)
                {
                    $userList[$a]['statusText'] = '正常';
                } else {
                    $userList[$a]['statusText'] = '凍結';
                }

                //用户角色
                $userList[$a]['role_name'] = Db::name('user_role')->where(['id'=>$userList[$a]['role_id']])->value("name");

                $userList[$a]['addtime'] = date("Y-m-d H:i:s",$userList[$a]['addtime']);
            }

            $data = [
                'code' => 0,
                'msg' => '数据返回成功',
                'count' => $count,
                'data' => $userList
            ];
            AdminLog::setTitle('获取用户列表');
            return json($data);
        }

        AdminLog::setTitle('用户列表');

        //未查看的记录修改状态
        if($this->user->where(['admin_notice_status'=>0])->find())
        {
            $this->user->where(['admin_notice_status'=>0])->update(['admin_notice_status'=>1]);
        }
        return $this->fetch();
    }

    /**
     * 用户表单
     * @return mixed
     * @author:wdx(wdx@ourstu.com)
     */
    public function userForm()
    {
        $id = input('get.id/d', 0);
        $userLst = UserCoin::where(['c.userid'=>$id])
            ->alias('c')
            ->join('user u','c.userid = u.id')
            ->field('c.*,u.username')
            ->find();
        $this->assign([
            'userLst' => $userLst
        ]);
        return $this->fetch();
    }

    /**
     * 用户表单
     * @return mixed
     * @author:wdx(wdx@ourstu.com)
     */
    public function userAddress()
    {
        $id = input('get.id/d', 0);
        $userLst = UserCoinAddress::where(['c.userid'=>$id])
            ->alias('c')
            ->join('user u','c.userid = u.id')
            ->field('c.*,u.username')
            ->find();

        $this->assign([
            'userLst' => $userLst
        ]);
        return $this->fetch();
    }

    /**
     * 用户表单
     * @return mixed
     * @author:wdx(wdx@ourstu.com)
     */
    public function userAccount()
    {
        $id = input('get.id/d', 0);
        $userLst = UserBank::where(['c.userid'=>$id])
            ->alias('c')
            ->join('user u','c.userid = u.id')
            ->join('bank b','c.bank = b.id')
            ->field('c.*,u.username,b.name as bankname')
            ->find();

        $this->assign([
            'userLst' => $userLst
        ]);
        return $this->fetch();
    }

    public function useReal()
    {
        if ($this->request->isAjax()) {
            $page = input('get.page/d', 1);
            $limit = input('get.limit/d', 20);
            $username = request()->param('username');
            $map = [];
            if($username != '')
            {
                $userId = $this->user->where(['username'=>$username])->value('id');
                if($userId)
                {
                    $map['userid'] = $userId;
                }
            }

            $userList = $this->userReal->where($map)->page($page, $limit)->order('id desc')->select()->toArray();
            $count = $this->userReal->where($map)->count();

            for ($a=0;$a<count($userList);$a++) {
                $userList[$a]['username'] = $this->user->where(['id'=>$userList[$a]['userid']])->value('username');
                switch ($userList[$a]['status'])
                {
                    case -1:
                        $userList[$a]['is_real_text'] = '未实名';
                        break;
                    case 0:
                        $userList[$a]['is_real_text'] = '审核中';
                        break;
                    case 1:
                        $userList[$a]['is_real_text'] = '审核成功';
                        break;
                    case 2:
                        $userList[$a]['is_real_text'] = '审核驳回';
                        break;
                    default:
                        $userList[$a]['is_real_text'] = '未实名';
                }
                $userList[$a]['addtime'] = date("Y-m-d H:i:s",$userList[$a]['addtime']);
            }

            $data = [
                'code' => 0,
                'msg' => '数据返回成功',
                'count' => $count,
                'data' => $userList
            ];
            AdminLog::setTitle('获取用户实名认证');
            return json($data);
        }
        AdminLog::setTitle('用户实名认证');

        //未查看的记录修改状态
        if($this->userReal->where(['admin_notice_status'=>0])->find())
        {
            $this->userReal->where(['admin_notice_status'=>0])->update(['admin_notice_status'=>1]);
        }

        return $this->fetch();
    }

    public function useRecom($key='')
    {
        if(request()->isPost()){
            $id = input('post.id');
            return json_encode($this->selectChild($id));
        }

        if($key != '')
        {
            if($id = Db::name('user')->where(['username'=>$key])->value('id'))
            {
                $toId = $id;
            } else {
                $toId = 1;
            }
        } else {
            $toId = 1;
        }

        $this->assign([
            'id' => $toId,
        ]);
        return $this->fetch();
    }

    private function selectChild($pid)
    {
        $data = array();
        $where['invit_1'] = $pid;
        $r = array(
            0=>'无',
            1=>'黄金', //大户
            2=>'白金', //大咖
            3=>'钻石', //大神
        );
        if($info = Db::name('user')->where($where)->field('id,username,level,get_money_status,total_investment')->select())
        {
            foreach ($info as $k=> $v){
                $arr[$k]['id'] = $v['id'];
                $arr[$k]['name'] = $v['username'].'|'.$r[$v['level']];
                if($v['get_money_status'] == 1)
                {
                    $arr[$k]['name'] = $arr[$k]['name'] . '|已开启程序猿|业绩:'.$v['total_investment'];
                } else {
                    $arr[$k]['name'] = $arr[$k]['name'] . '|未开启程序猿|业绩:'.$v['total_investment'];
                }
                $pid = 0;
                $arr[$k]['pid'] = $pid;
                $newArr =  $this->selectChild1($v['id']);
                for($a=0;$a<count($newArr);$a++)
                {
                    array_push($data,$newArr[$a]);
                }
                array_push($data,$arr[$k]);
            }
        }
        return $data;
    }

    /**
     * 删除用户
     * @author:wdx(wdx@ourstu.com)
     */
    public function delUser()
    {
        $ids = array_unique(input('post.id/a', []));
        $rs = $this->user->whereIn('id', $ids)->setField('status', '-1');
        if ($rs) {
            AdminLog::setTitle('禁用用户');
            $this->success('禁用成功');
        } else {
            $this->error('禁用失败');
        }
    }

    /**
     * 实名认证通过
     * @author:wdx(wdx@ourstu.com)
     */
    public function passReal()
    {
        $ids = array_unique(input('post.id/a', []));
        $userId = $this->userReal->where(['id'=>$ids])->value('userid');
        $rs = $this->userReal->whereIn('id', $ids)->setField('status', '1');

        if ($rs) {
            //升级用户等级,判断是否已绑定google验证
            $userLevel = $this->user->where(['id'=>$userId])->value('level');
            $googleStatus = 0;
            if(Db::name('user_google')->where(['userid'=>$userId])->find())
            {
                $googleStatus = 1;
            }
            //符合升级条件
            if($googleStatus == 1 && $userLevel == 1) {
                $this->user->where(['id'=>$userId])->update(['level'=>2]);
            }
            AdminLog::setTitle('实名认证通过');
            //添加消息通知
            addNotice('real_check_success',$userId);
            $this->success('操作成功');
        } else {
            $this->error('操作失败');
        }
    }

    /**
     * 实名认证通过
     * @author:wdx(wdx@ourstu.com)
     */
    public function delReal()
    {
        $ids = array_unique(input('post.id/a', []));
        $rs = $this->userReal->whereIn('id', $ids)->setField('status', '2');
        if ($rs) {
            AdminLog::setTitle('实名认证驳回');
            //添加消息通知
            $userId = $this->userReal->where(['id' => $ids])->value('userid');
            addNotice('real_check_error',$userId);
            $this->success('操作成功');
        } else {
            $this->error('操作失败');
        }
    }


    /**
     * 用户日志
     * @return mixed|Json
     * @author:wdx(wdx@ourstu.com)
     */
    public function userLog()
    {
        if ($this->request->isAjax()) {
            $page = input('get.page/d', 1);
            $limit = input('get.limit/d', 20);
            $userLogList = $this->userLog
                ->page($page, $limit)
                ->order('id desc')
                ->select()
                ->toArray();
            foreach ($userLogList as &$val) {
                to_ip($val);
            }
            unset($val);
            $count = $this->userLog->count();
            $data = [
                'code' => 0,
                'msg' => '数据返回成功',
                'count' => $count,
                'data' => $userLogList
            ];
            AdminLog::setTitle('获取用户日志');
            return json($data);
        }
        AdminLog::setTitle('用户日志');
        return $this->fetch();
    }

    /**
     * 删除用户日志
     * @author:wdx(wdx@ourstu.com)
     */
    public function delUserLog()
    {
        $ids = array_unique(input('post.id/a', []));
        $rs = $this->userLog->whereIn('id', $ids)->delete();
        if ($rs) {
            AdminLog::setTitle('刪除用户日志');
            $this->success('刪除成功');
        } else {
            $this->error('刪除失败');
        }
    }

    /**
     * 用户退出登录
     * @author:wdx(wdx@ourstu.com)
     */
    public function logout()
    {
        session('user_auth', null);
        session('user_auth_sign', null);
        AdminLog::setTitle('用户退出登录');
        redirect('index/user/login');
    }

    /**
     * 用户信息修复
     */
    public function fixedUser(){
        $ids = array_unique(input('post.id/a', []));
        $rs = $this->user->whereIn('id', $ids)->setField('status', '1');
        if ($rs) {
            AdminLog::setTitle('解禁用户');
            $this->success('解禁成功');
        } else {
            $this->error('解禁失败');
        }
    }

    public function bindAdmin()
    {
        if ($this->request->isAjax()){
            $user_id = request()->param('user_id');
            $admin_id = request()->param('admin_id');
            $type = request()->param('type');

            $res = $this->user->where('id','EQ',$user_id)->find();
            if($type == 1){ //绑定
                if(!empty($res['admin_id'])){
                    $data = [
                        'code' => -1,
                        'msg' => '用户管理员绑定已存在，重新绑定需先解绑'
                    ];
                }else{
                    $data['admin_id'] = $admin_id;
                    $data['update_time'] = time();
                    $res = $this->user->where('id','EQ',$user_id)->update($data);
                    if ($res) {
                        $data = [
                            'code' => 1,
                            'msg' => '管理员绑定成功'
                        ];
                    } else {
                        $data = [
                            'code' => -1,
                            'msg' => '管理员绑定失败'
                        ];
                    }
                }
            }elseif ($type == 2){//解绑
                $data['admin_id'] = '';
                $data['update_time'] = time();
                $res = $this->user->where('id','EQ',$user_id)->update($data);
                if ($res) {
                    $data = [
                        'code' => 0,
                        'msg' => '管理员解绑成功'
                    ];
                } else {
                    $data = [
                        'code' => -1,
                        'msg' => '管理员解绑失败'
                    ];
                }
            }
            return json($data);
        }
    }

    /*
     * 用户绑定标签
     */
    public function bindMark()
    {
        if ($this->request->isAjax()){
            $user_id = request()->param('user_id');
            $mark_id = request()->param('mark_id');
            $type = request()->param('type');

            $map[]= ['user_id', 'EQ', $user_id];
            $map[]= ['mark_id', 'EQ', $mark_id];
            $res = $this->userMark->where($map)->find();
            if($type == 1){ //绑定
                if(!empty($res)){
                    $data = [
                        'code' => -1,
                        'msg' => '该标签用户已绑定'
                    ];
                }else{
                    $data['user_id'] = $user_id;
                    $data['mark_id'] = $mark_id;
                    $res = $this->userMark->save($data);
                    if ($res) {
                        $data = [
                            'code' => 1,
                            'msg' => '标签绑定成功'
                        ];
                    } else {
                        $data = [
                            'code' => -1,
                            'msg' => '标签绑定失败'
                        ];
                    }
                }
            }elseif ($type == 2){//解绑
                $markInfo = $this->mark->where('id','eq',$mark_id)->find();
                $admin_user = session('admin_auth');
                if(($markInfo['area_id'] == $admin_user['area_id'] && $markInfo['instration_id'] == $admin_user['instration_id'])
                    || $markInfo['type'] == 0){
                    $res = $this->userMark->where($map)->delete();
                    if ($res) {
                        $data = [
                            'code' => 0,
                            'msg' => '标签解绑成功'
                        ];
                    } else {
                        $data = [
                            'code' => -1,
                            'msg' => '标签解绑失败'
                        ];
                    }
                }else{
                    $this->error('对不起,该标签您无权删除！');
                }

            }
            return json($data);
        }
    }

    public function userProfileList()
    {
        if ($this->request->isAjax()) {
            $page = input('get.page/d', 1);
            $limit = input('get.limit/d', 20);

            $map[] = ['status', '>=', 0];
            $mobile = request()->param('mobile');
            $identity = request()->param('identity');
            if(!empty($mobile)){
                $map[] = ['mobile', '=', $mobile];
            }
            if(!empty($identity)){
                $map[] = ['identity', '=', $identity];
            }
            $userList = $this->user->where($map)->page($page, $limit)->select();
            $count = $this->user->where($map)->count();

            foreach ($userList as &$val) {
                $val['avatar_status']   = ($val['profile'] & AdminUser::PROFILE_AVATAR) ? '已完成' : '未完成';
                $val['nickname_status'] = ($val['profile'] & AdminUser::PROFILE_NICKNAME) ? '已完成' : '未完成';
                $val['gender_status']   = ($val['profile'] & AdminUser::PROFILE_GENDER) ? '已完成' : '未完成';
                $val['birthday_status'] = ($val['profile'] & AdminUser::PROFILE_BIRTHDAY) ? '已完成' : '未完成';
                $val['remark_status']   = ($val['profile'] & AdminUser::PROFILE_REMARK) ? '已完成' : '未完成';
                $val['has_record'] = CommonRecord::where(array('uid' => $val['id'], 'type' => CommonRecord::PROFILE))->find() ? '已领取' : '未领取';

                if($val['is_vest']==1){
                    $val['id']=$val['id']."<span style='font-size: 6px;color:green;'>[马甲]</span>";
                }
                if($val['identity']==1){
                    $val['identity']='找警网';
                }
                if($val['identity']==2){
                    $val['identity']='公安外网';
                }
                if($val['identity']==3){
                    $val['identity']='微警务';
                }
            }
            unset($val);
            $data = [
                'code' => 0,
                'msg' => '数据返回成功',
                'count' => $count,
                'data' => $userList
            ];
            AdminLog::setTitle('获取用户资料完整度列表');
            return json($data);
        }
        AdminLog::setTitle('用户资料完整度列表');
        return $this->fetch();

    }

    /**
     * 用户特征码表单
     * @return mixed
     * @author:wdx(wdx@ourstu.com)
     */
    public function userMarkForm()
    {
        $id = input('get.id/d', 0);
        $user = $this->user->find($id);
        $marks = model('admin/Mark')
            ->alias('m')
            ->join('user_mark um','m.id = um.mark_id')
            ->join('user u','u.id = um.user_id')
            ->where('u.id', 'EQ', $id)
            ->field('m.*')
            ->order('id desc')
            ->select();
        $userRoleTree = $this->userRole->getTree('id, pid, title');
        $userScoreCount = $this->userCount->getScoreCount($id);
        $scoreType = $this->scoreType->getTypeList();
        $this->assign('user', $user);
        $this->assign('score', $userScoreCount);
        $this->assign('scoreType', $scoreType);
        $this->assign('userRoleTree', $userRoleTree);
        $this->assign('marks', $marks);
        return $this->fetch();
    }
}