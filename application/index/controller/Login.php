<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/11/19
 * Time: 15:52
 */
namespace app\index\controller;

use app\index\model\User;
use app\index\model\UserKey;
use think\Db;
use app\index\model\SmsLogs;
/**
 * 首页
 * Class Index
 * @package app\wap\controller
 */
class Login extends Common
{

    public $commonConfig;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->commonConfig = Db::table('ecshecom_common_config');
    }

    /**
     * 登录
     */
    public function login(){
        //登录验证
        $userLoginId = session('user_login_id');
        if ($userLoginId) {
            $this->redirect('index/Index/index');
        }

        return $this->fetch();
    }

    /**
     * 首次登录
     */
    public function firstLogin(){

        //登录验证
        $userLoginId = session('user_login_id');
        if ($userLoginId) {
            $this->redirect('index/Index/index');
        }

        $checkUserMoble = session("check_user_moble");
        if(!isset($checkUserMoble) || $checkUserMoble == '')
        {
            $this->redirect("login/login");
        }

        $this->assign([
            'checkUserMoble' => $checkUserMoble,
        ]);

        return $this->fetch();
    }

    /**
     * 发送邮箱或者短信验证
     */
    public function sendUserCode(){
        $data = array();

        //判断用户是否是香港，是这手机短信验证
        if($this->params['moble'] == '')
        {
            $this->apiReturn('200', lang('write_moble'), []);
        }

        if(!is_mobile_phone($this->params['moble']))
        {
            $this->apiReturn('200', '手机号码不正确，请重新输入！', []);
        }

        //数据库中是否存在该手机号码
        $userInfo = Db::name("user")->where(['moble'=>$this->params['moble']])->find();
        if(!isset($userInfo))
        {
            $this->apiReturn('200', '该手机号码不存在，请重新输入！', []);
        }

        if(sendMobileMeg($this->params['moble']))
        {
            $this->apiReturn('100','验证码短信发送成功！',$data);
        }

        $this->apiReturn('200','验证码短信发送失败！',$data);
    }

    /**
     * 登录验证
     */
    public function loginSubmit()
    {
        //验证
        $rData = array();
        if (!isset($this->params['name']) || !isset($this->params['password'])) {
            $this->apiReturn('200', lang('data_exception'), $rData);
        }
        foreach ($this->params as $k => $v) {
            if ($v == '') {
                $this->apiReturn('200', lang('registration_parameters_must_not_be_empty'), $rData);
            }
        }
        if(!is_mobile_phone($this->params['name']))
        {
            $this->apiReturn('200','请输入正确的手机号码!',$rData);
        }

        //ip检测
        $ip = get_real_ip();
        if(!isset($ip) || $ip == FALSE || $ip == '')
        {
            $this->apiReturn('200',lang('login_error'),$rData);
        }

        //登录流程
        if(!$userInfo = User::where(['moble'=>$this->params['name']])->field('id,status,is_first_login')->find())
        {
            $this->apiReturn('200',lang('not_account'),[]);
        }

        if($userInfo['status'] == -1) //冻结状态
        {
            $this->apiReturn('200',lang('account_anomalies'),[]);
        }

        $userPw = UserKey::where(['userid'=>$userInfo['id']])->find();

        $middlePw = md5($this->params['password']);
        $middlePw = md5($userPw['rd'] . $middlePw .$userPw['rd']);
        if($middlePw != $userPw['pw'])
        {
            $this->apiReturn('200',lang('login_pw_error'),[]);
        }

        if($userInfo["is_first_login"] == 0)//是否是首次登录
        {
            session('check_user_moble', $this->params['name']);
            //跳转修改密码页面
            $this->apiReturn('600',"即将跳转中......",[]);
        } else {
            $userCheckCode = tradenoa(); //随机验证码

            $user = new User; //保存随机验证码
            $user->save([
                'check_code' => $userCheckCode,
                'ip' => $ip,
            ],['id' => $userInfo['id']]);

            //用户登录记录
            saveLoginInfo($userInfo['id'],'',1,1,$ip,'','');

            //加密并session
            $reversibleKey = getenv('REVERSIBLE_KEY'); //可逆转key
            $userInfo['id'] = $userInfo['id'] * 9 - 3;
            $userEncryptionId = encrypt((string)$userInfo['id'] . ' ' . $userCheckCode,$reversibleKey); //加密用户id

            //设置session
            session('head_user_id', $userEncryptionId);
            $overTime = time() + 60*60*12; //登陆过期时间12小时
            session('user_login_over_time',$overTime); //设置过期时间

            $this->apiReturn('100',"恭喜您，登录成功",[]);
        }
    }

    /**
     * 初次登录验证
     */
    public function firstLoginSubmit()
    {
        //验证
        $rData = array();
        if (!isset($this->params['code']) || !isset($this->params['password']) || !isset($this->params['repeatPassword'])) {
            $this->apiReturn('200', lang('data_exception'), $rData);
        }
        foreach ($this->params as $k => $v) {
            if ($v == '') {
                $this->apiReturn('200', lang('registration_parameters_must_not_be_empty'), $rData);
            }
        }

        if(session("check_user_moble") == '')
        {
            $this->apiReturn('600','请重新登录!',$rData);
        }

        //ip检测
        $ip = get_real_ip();
        if(!isset($ip) || $ip == FALSE || $ip == '')
        {
            $this->apiReturn('200',lang('login_error'),$rData);
        }

        //登录流程
        if(!$userInfo = User::where(['moble'=>session("check_user_moble")])->field('id,status,is_first_login')->find())
        {
            $this->apiReturn('200',lang('not_account'),[]);
        }

        if($userInfo["is_first_login"] != 0) //不是首次登录
        {
            $this->apiReturn('200','您不是首次登录!',[]);
        }

        if($userInfo['status'] == -1) //冻结状态
        {
            $this->apiReturn('200',lang('account_anomalies'),[]);
        }

        if($this->params['password'] != $this->params['repeatPassword'])
        {
            $this->apiReturn('200','两次输入的密码不一致!',[]);
        }

        //短信验证
        $megWhere['mobile'] = session("check_user_moble");
        $megWhere['code'] = $this->params['code'];
        $sendTime = SmsLogs::where($megWhere)->order('time desc')->field('time,id,is_use')->find();
        if(!isset($sendTime)) //短信15分钟内有效
        {
            $this->apiReturn('200',lang('msg_error'),$rData);
        }
        if($sendTime['is_use'] == 1)
        {
            $this->apiReturn('200',lang('msg_again_error'),$rData);
        }
        if(strtotime($sendTime['time']) + 60*15 < time())
        {
            $this->apiReturn('200',lang('msg_overdue'),$rData);
        }
        //修改该验证码状态
        $smsLog = new SmsLogs;
        $smsLog->save([
            'is_use' => 1,
        ],['id' => $sendTime['id']]);

        //登录更新设置
        $password = $this->params['password']; //默认密码
        $newPw = array();
        $newPw['rd'] = tradenoa();
        $newPw['pw'] = md5($newPw['rd'] . md5($password) . $newPw['rd']);
        $newPw['addtime'] = time();
        Db::name('user_key')->where(['userid'=>$userInfo['id']])->update($newPw);

        //清空session
        session("check_user_moble", null);

        $userCheckCode = tradenoa(); //随机验证码
        $user = new User; //保存随机验证码
        $user->save([
            'check_code' => $userCheckCode,
            'ip' => $ip,
            'is_first_login' => 1, //用户状态修改
        ],['id' => $userInfo['id']]);

        //用户登录记录
        saveLoginInfo($userInfo['id'],'',1,1,$ip,'','');

        //加密并session
        $reversibleKey = getenv('REVERSIBLE_KEY'); //可逆转key
        $userInfo['id'] = $userInfo['id'] * 9 - 3;
        $userEncryptionId = encrypt((string)$userInfo['id'] . ' ' . $userCheckCode,$reversibleKey); //加密用户id

        //设置session
        session('head_user_id', $userEncryptionId);
        $overTime = time() + 60*60*12; //登陆过期时间12小时
        session('user_login_over_time',$overTime); //设置过期时间

        $this->apiReturn('100',"恭喜您，登录成功",[]);
    }

    /**
     * 忘记登录密码
     */
    public function forgetloginpwd(){
        return $this->fetch();
    }

    /**
     * 找回密码
     */
    public function findSubmit()
    {
        //验证
        $rData = array();
        if (!isset($this->params['name']) || !isset($this->params['email'])) {
            $this->apiReturn('200', lang('data_exception'), $rData);
        }
        foreach ($this->params as $k => $v) {
            if ($v == '') {
                $this->apiReturn('200', lang('registration_parameters_must_not_be_empty'), $rData);
            }
        }
        if(!is_email($this->params['email']))
        {
            $this->apiReturn('200',lang('please_fill_in_the_correct_email_address'),$rData);
        }

        if(!$userInfo = User::where(['username'=>$this->params['name'],'email'=>$this->params['email']])->field('id,status')->find())
        {
            $this->apiReturn('200',lang('not_account'),[]);
        }

        if($userInfo['status'] != 1)
        {
            $this->apiReturn('200',lang('account_anomalies'),[]);
        }

        $userCheckCode = tradenoa(20); //随机验证码
        $userPw = tradenoah(8); //密码
        $user = new User; //保存随机验证码
        $user->save([
            'back_pw' => $userCheckCode,
            'back_pw_c' => $userPw,
        ],['id' => $userInfo['id']]);

        $url = 'http://' . $_SERVER['SERVER_NAME'] . '/Login/changePw?lang=' . $this->params['lang'] . '&code=' . $userCheckCode;

        //发送邮件
        $content = lang('find_content') . '<a href="'. $url .'">' .$url . '</a>' . lang('change_do') .'"'. $userPw .'"' . lang('do_not_withdraw');//echo $content;die;
      echo '<pre>';var_dump(sendEmailMeg($this->params['email'],lang('find_title'),$content));die;
       // if(sendEmailMeg($this->params['email'],lang('find_title'),$content) == true)
           if(sendEmailMeg($this->params['email'],lang('find_title'),$content) == true)
        {
            $this->apiReturn('100',lang('email_send_success'),[]);
        }
        $this->apiReturn('200',lang('email_send_error'),[]);
    }

    /**
     * 重置登陆密码
     */
    public function changePw($code='')
    {
        if($code == '')
        {
            $tip = lang('pw_reset_fail');
        } else {
            $userId = User::where(['back_pw'=>$code])->field('id,back_pw_c')->find();
            if(!isset($userId))
            {
                $tip = lang('pw_reset_fail');
            } else {
                $newPw['rd'] = tradenoa();
                $newPw['pw'] = md5($newPw['rd'] . md5($userId['back_pw_c']) . $newPw['rd']);

                //重置密码
                $userPw = UserKey::where(['userid'=>$userId['id']])->find();

                $userKey = UserKey::get($userPw['id']);
                $userKey->rd = $newPw['rd'];
                $userKey->pw = $newPw['pw'];
                $userKey->save();

                $tip = lang('pw_reset_success');

                $user = new User(); //清空
                $user->save([
                    'back_pw' => '',
                    'back_pw_c' => '',
                ],['id' => $userId['id']]);
            }
        }

        $this->assign([
            'tip' => $tip,
        ]);
        return $this->fetch();

    }

    /**
     * 验证邮箱
     */
    public function checkEmail($code='')
    {
        if($code == '')
        {
            $tip = lang('email_error');
        } else {
            $userId = User::where(['check_email_c'=>$code])->field('id')->find();
            if(!isset($userId))
            {
                $tip = lang('email_error');
            } else {
                $tip = lang('email_success');

                $user = new User(); //设置状态
                $user->save([
                    'status' => 1,
                    'level' => 1,
                    'check_email_c' => '',
                ],['id' => $userId['id']]);
            }
        }

        $this->assign([
            'tip' => $tip,
        ]);
        return $this->fetch();

    }

    /**
     * 退出
     */
    public function logout()
    {
        session('head_user_id', null);
        session('user_login_over_time',null);
        $this->redirect('index/Login/login');
    }
}