<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/11/19
 * Time: 15:52
 */
namespace app\index\controller;

use think\Db;
use app\index\model\SmsLogs;
use app\index\model\User as UserModel;
use app\index\model\UserReal;
use app\index\model\UserContact;
use app\index\model\UserKey;
use app\index\model\UserGoogle;
/**
 * 用户中心
 * Class Index
 * @package app\wap\controller
 */
class User extends Base
{

    public $user;
    public $userReal;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->user = model('index/User');
        $this->userReal = model('index/UserReal');
    }

    /**
     * 个人中心
     */
    public function personInfo()
    {
        return $this->fetch();
    }

    /**
     * 会员资料
     */
    public function profile(){

        //当前用户
        $userInfo = $this->user->where(['id'=>$this->userId])->field('username,email,moble,country')->find();

        $this->assign([
            'countrys' => [],
            'userInfo' => $userInfo,
        ]);

        return $this->fetch();
    }

    /**
     * 修改手机
     */
    public function changeMoble(){

        //当前用户
        $userInfo = $this->user->where(['id'=>$this->userId])->field('username,email,moble,country')->find();

        $this->assign([
            'countrys' => [],
            'userInfo' => $userInfo,
        ]);

        return $this->fetch();
    }

    /**
     * 实名认证
     */
    public function realNameAuthentication(){
        //实名认证
        $realInfo =$this->userReal->where(['userid'=>$this->userId])->find();
        $realStatus = 0;
        if(!$realInfo)
        {
            $realStatus = -1;//未实名认证
        } else {
            $realStatus = $realInfo['status']; //实名认证状态：0未审核 1已审核 2审核驳回
        }

        $this->assign([
            'realInfo' => $realInfo,
            'realStatus' => $realStatus,
        ]);

        return $this->fetch();
    }

    /**
     * 实名认证提交
     */
    public function sureRealNameAuthentication(){

        //用户等级是否异常
        $userLevel = $this->user->where(['id'=>$this->userId])->value('level');
        if($userLevel == 2)
        {
            $this->apiReturn('200', lang('data_exception'), []);
        }

        if($userLevel == 0) //先进行邮箱验证
        {
            $this->apiReturn('200', lang('check_email_f'), []);
        }

        if (!isset($this->params['name']) || !isset($this->params['card']) || !isset($this->params['face_img']) || !isset($this->params['back_img']) || !isset($this->params['user_take_card_img']))
        {
            $this->apiReturn('200', lang('data_exception'), []);
        }
        foreach ($this->params as $k => $v) {
            if ($v == '') {
                $this->apiReturn('200', lang('data_exception'), []);
            }
        }

        //判定是否是图片
        $faceImg = $this->params['face_img'];
        $fi = @getimagesize($faceImg); //验证是否是图片
        if($fi == false)
        {
            $this->apiReturn('200', lang('img_error'), []);
        }

        //判定是图片流还是路径
        if (preg_match('/^(data:\s*image\/(\w+);base64,)/',$faceImg,$result)){ //图片流
            $type = $result[2];//图片后缀
            $new_file = 'static/upload/';
            if (!file_exists($new_file)) {
                //检查是否有该文件夹，如果没有就创建，并给予最高权限
                mkdir($new_file, 0700);
            }

            $filename = time() . '_' . uniqid() . ".{$type}"; //文件名
            $new_file = $new_file . $filename;
            //写入操作
            if(file_put_contents($new_file, base64_decode(str_replace($result[1], '', $faceImg)))) {
                $faceImgurl = 'http://' . $_SERVER['HTTP_HOST'] . '/'  . $new_file; //图片路径
            }
        } else {
            $faceImgurl = $faceImg;
        }

        //判定是否是图片
        $backImg = $this->params['back_img'];
        $fi = @getimagesize($backImg); //验证是否是图片
        if($fi == false)
        {
            $this->apiReturn('200', lang('img_error'), []);
        }

        //判定是图片流还是路径
        if (preg_match('/^(data:\s*image\/(\w+);base64,)/',$backImg,$result)){ //图片流
            $type = $result[2];//图片后缀
            $new_file = 'static/upload/';
            if (!file_exists($new_file)) {
                //检查是否有该文件夹，如果没有就创建，并给予最高权限
                mkdir($new_file, 0700);
            }

            $filename = time() . '_' . uniqid() . ".{$type}"; //文件名
            $new_file = $new_file . $filename;
            //写入操作
            if(file_put_contents($new_file, base64_decode(str_replace($result[1], '', $backImg)))) {
                $backImgurl = 'http://' . $_SERVER['HTTP_HOST'] . '/'  . $new_file; //图片路径
            }
        } else {
            $backImgurl = $backImg;
        }

        //判定是否是图片
        $userTakeCardImg = $this->params['user_take_card_img'];
        $fi = @getimagesize($userTakeCardImg); //验证是否是图片
        if($fi == false)
        {
            $this->apiReturn('200', lang('img_error'), []);
        }

        //判定是图片流还是路径
        if (preg_match('/^(data:\s*image\/(\w+);base64,)/',$userTakeCardImg,$result)){ //图片流
            $type = $result[2];//图片后缀
            $new_file = 'static/upload/';
            if (!file_exists($new_file)) {
                //检查是否有该文件夹，如果没有就创建，并给予最高权限
                mkdir($new_file, 0700);
            }

            $filename = time() . '_' . uniqid() . ".{$type}"; //文件名
            $new_file = $new_file . $filename;
            //写入操作
            if(file_put_contents($new_file, base64_decode(str_replace($result[1], '', $userTakeCardImg)))) {
                $userTakeCardImgurl = 'http://' . $_SERVER['HTTP_HOST'] . '/'  . $new_file; //图片路径
            }
        } else {
            $userTakeCardImgurl = $userTakeCardImg;
        }

        //保存
        $realData = array();
        $realData['statue'] = 0;
        $realData['name'] = $this->params['name'];
        $realData['card'] = $this->params['card'];
        $realData['face_img'] = $faceImgurl;
        $realData['back_img'] = $backImgurl;
        $realData['user_take_card_img'] = $userTakeCardImgurl;

        //判定是否姓名和身份证重复
        $checkReal = array();
        $checkReal[] = ['userid','<>',$this->userId];
        $checkReal[] = ['name','=',$this->params['name']];
        if(UserReal::where($checkReal)->find())
        {
            $this->apiReturn('200',lang('true_name_error'),[]);
        }

        $checkCard = array();
        $checkCard[] = ['userid','<>',$this->userId];
        $checkCard[] = ['card','eq',$this->params['card']];
        if(UserReal::where($checkCard)->find())
        {
            $this->apiReturn('200',lang('true_card_error'),[]);
        }

        //是否要发送消息通知
        if(!UserReal::where(['admin_notice_status'=>0])->find())
        {
            $getNoticeMobile = Db::name('common_config')->where(['name'=>'get_notice_mobile'])->value('value');
            sendAdminNoticeMeg($getNoticeMobile,'实名认证提示','有新的实名认证，请及時查看!');
        }

        //实名认证
        $realInfo = UserReal::where(['userid'=>$this->userId])->value('id');
        if(!$realInfo)
        {
            $realData['addtime'] = time();
            $realData['userid'] = $this->userId;
            $userReal = new UserReal;
            $userReal->save($realData);
        } else {
            $userReal = UserReal::get($realInfo);
            $userReal->status = 0;
            $userReal->name = $this->params['name'];
            $userReal->card = $this->params['card'];
            $userReal->face_img = $faceImgurl;
            $userReal->back_img = $backImgurl;
            $userReal->user_take_card_img = $userTakeCardImgurl;
            $userReal->save();
        }

        $this->apiReturn('100',lang('do_success'),[]);
    }

    /**
     * 银行卡号
     */
    public function bankCardNumber(){
        $banks = $this->bank->where(['status'=>1])->order('list_order asc')->field('id,name')->select();
        //实名认证
        $bankInfo =$this->userBank->where(['userid'=>$this->userId])->find();
        $this->assign([
            'banks' => $banks,
            'bankInfo' => $bankInfo,
        ]);
        return $this->fetch();
    }

    /**
     * 银行保存
     */
    public function bankSubmit(){

        //用户等级是否异常
        $userLevel = $this->user->where(['id'=>$this->userId])->value('level');
        if($userLevel == 1) //先进行实名认证
        {
            $this->apiReturn('200', lang('check_true_f'), []);
        }

        if($userLevel == 0) //先进行邮箱验证
        {
            $this->apiReturn('200', lang('check_email_f'), []);
        }

        if (!isset($this->params['name']) || !isset($this->params['prov']) || !isset($this->params['card']) || !isset($this->params['surecard']) || !isset($this->params['bank']) || !isset($this->params['bank_img']))
        {
            $this->apiReturn('200', lang('data_exception'), []);
        }
        foreach ($this->params as $k => $v) {
            if ($v == '') {
                $this->apiReturn('200', lang('data_exception'), []);
            }
        }

        if($this->params['card'] != $this->params['surecard'])
        {
            $this->apiReturn('200', lang('bank_not_one'), []);
        }

        $saveData = array();
        $saveData['userid'] = $this->userId;
        $saveData['bank'] = $this->params['bank'];
        $saveData['bank_prov'] = $this->params['prov'];
        $saveData['bank_person'] = $this->params['name'];
        $saveData['bank_card'] = $this->params['card'];
        $saveData['addtime'] = time();

        //验证开户行姓名和用户名是否一致
        $trueName = $this->userReal->where(['userid'=>$this->userId])->value('name');
        if($this->params['name'] != $trueName)
        {
            $this->apiReturn('200', lang('two_name_error'), []);
        }

        //银行卡正面照
        //判定是图片流还是路径
        $bankImg = $this->params['bank_img'];
        if (preg_match('/^(data:\s*image\/(\w+);base64,)/',$bankImg,$result)){ //图片流
            $type = $result[2];//图片后缀
            $new_file = 'static/upload/';
            if (!file_exists($new_file)) {
                //检查是否有该文件夹，如果没有就创建，并给予最高权限
                mkdir($new_file, 0700);
            }

            $filename = time() . '_' . uniqid() . ".{$type}"; //文件名
            $new_file = $new_file . $filename;
            //写入操作
            if(file_put_contents($new_file, base64_decode(str_replace($result[1], '', $bankImg)))) {
                $bankImgurl = 'http://' . $_SERVER['HTTP_HOST'] . '/'  . $new_file; //图片路径
            }
        } else {
            $bankImgurl = $bankImg;
        }
        $saveData['bank_img'] = $bankImgurl;

        if($this->userBank->where(['userid'=>$this->userId])->find())
        {
            //添加消息通知
            addNotice('bank_update_success',$this->userId);
            $res = $this->userBank->where(['userid'=>$this->userId])->update($saveData);
        } else {
            //添加消息通知
            addNotice('bank_add_success',$this->userId);
            $res = $this->userBank->where(['userid'=>$this->userId])->insert($saveData);
        }

        if($userLevel == 2 && $this->moble != '')
        {
            $this->user->where(['id'=>$this->userId])->update(['level'=>3]);
        }

        if($res)
        {
            $this->apiReturn('100',lang('do_success'),[]);
        }
        $this->apiReturn('200',lang('do_error'),[]);
    }

    /**
     * 搬砖设置
     */
    public function brickMovingSettings(){

        //默认
        $isOpen = 0; //默认关闭
        $riskLevel = 1; //默认低风险

        //原有设置
        $alreadyWhere[] = ['userid','=',$this->userId];
        $alreadyWhere[] = ['status','=',1];
        $alreadyData = UserContact::where($alreadyWhere)->field('reward_status,risk_level')->find();
        if(isset($alreadyData) && count($alreadyData) > 0)
        {
            $isOpen = $alreadyData['reward_status'];
            $riskLevel = $alreadyData['risk_level'];
        }

        $this->assign([
            'isOpen' => $isOpen,
            'riskLevel' => $riskLevel,
        ]);
        return $this->fetch();
    }

    /**
     * google验证设置
     */
    public function googleCheck(){

        $ga = new PHPGangstaGoogleAuthenticator();
        $secret = $ga->createSecret();

        //判断用户是否绑定google验证
        $checkStatus = 0;
        if(UserGoogle::where(['userid'=>$this->userId])->find())
        {
            $checkStatus = 1;
        }

        $this->assign([
            'checkStatus' => $checkStatus,
            'secret' => $secret,
        ]);
        return $this->fetch();
    }

    /**
     * google提交设置
     */
    public function googleSetting(){
        if (!isset($this->params['key']) || !isset($this->params['code'])) {
            $this->apiReturn('200', lang('data_exception'), []);
        }
        foreach ($this->params as $k => $v) {
            if ($v == '') {
                $this->apiReturn('200', lang('data_exception'), []);
            }
        }
        //检测谷歌验证
        $ga = new PHPGangstaGoogleAuthenticator();
        $checkResult = $ga->verifyCode($this->params['key'], $this->params['code'], 2);
        if(!$checkResult)
        {
            $this->apiReturn('200', lang('google_check_error'), []);
        }

        //邮箱验证码验证
        $megWhere['email'] = $this->userEmail;
        $megWhere['code'] = $this->params['msg'];
        $sendTime = SmsLogs::where($megWhere)->order('time desc')->field('time,id,is_use')->find();
        if(!isset($sendTime)) //短信15分钟内有效
        {
            $this->apiReturn('200',lang('msg_error'),[]);
        }
        if($sendTime['is_use'] == 1)
        {
            $this->apiReturn('200',lang('msg_again_error'),[]);
        }
        if(strtotime($sendTime['time']) + 60*15 < time())
        {
            $this->apiReturn('200',lang('msg_overdue'),[]);
        }

        //修改该验证码状态
        $smsLog = new SmsLogs;
        $smsLog->save([
            'is_use' => 1,
        ],['id' => $sendTime['id']]);

        //更新
        if($googleData = UserGoogle::where(['userid'=>$this->userId])->find())
        {
            $userGoogle = UserGoogle::get($googleData['id']);
            $userGoogle->google_key = $this->params['key'];
            $userGoogle->create_time = time();
            if($userGoogle->save())
            {
                //添加消息通知
                addNotice('google_check_update_success',$this->userId);

                $this->apiReturn('100', lang('do_success'), []);
            }
            $this->apiReturn('200', lang('do_error'), []);
        }

        //添加数据
        $userGoogle = new UserGoogle();
        $userGoogle->userid      = $this->userId;
        $userGoogle->google_key  = $this->params['key'];
        $userGoogle->create_time = time();
        if($userGoogle->save())
        {
            //判断用户等级,如已实名认证，同时等级未L1，则升级
            //实名认证
            $realInfo =$this->userReal->where(['userid'=>$this->userId])->find();
            $realStatus = 0;
            if(!$realInfo)
            {
                $realStatus = -1;//未实名认证
            } else {
                $realStatus = $realInfo['status']; //实名认证状态：0未审核 1已审核 2审核驳回
            }
            if($this->userLevel < 2 && $realStatus == 1) //符合条件升级为L2
            {
                $userInfo = UserModel::get($this->userId);
                $userInfo->level = 2; //L2
                $userInfo->save();
            }

            //添加消息通知
            addNotice('google_check_add_success',$this->userId);

            $this->apiReturn('100', lang('do_success'), []);
        }
        $this->apiReturn('200', lang('do_error'), []);
    }

    /**
     * 搬砖进行设置
     */
    public function moveSetting(){
        if (!isset($this->params['swtichbanzhuan']) || !isset($this->params['risk'])) {
            $this->apiReturn('200', lang('data_exception'), []);
        }
        foreach ($this->params as $k => $v) {
            if ($v == '') {
                $this->apiReturn('200', lang('data_exception'), []);
            }
        }

        $chooseArray = ['true','false'];
        if(!in_array($this->params['swtichbanzhuan'],$chooseArray))
        {
            $this->apiReturn('200', lang('data_exception'), []);
        }

        $levelArray = [1,2,3];
        if(!in_array($this->params['risk'],$levelArray))
        {
            $this->apiReturn('200', lang('data_exception'), []);
        }

        if($this->params['swtichbanzhuan'] == 'true')
        {
            $swtichbanzhuan = 1;
        } else {
            $swtichbanzhuan = 0;
        }

        //原有设置
        $alreadyWhere[] = ['userid','=',$this->userId];
        $alreadyWhere[] = ['status','=',1];
        $alreadyData = UserContact::where($alreadyWhere)->field('id,reward_status,risk_level')->find();
        if(!isset($alreadyData) || count($alreadyData) == 0)
        {
            $this->apiReturn('200', lang('buy_contact_first'), []);
        }

        $userContact = UserContact::get($alreadyData['id']);
        $userContact->reward_status = $swtichbanzhuan;
        $userContact->risk_level = $this->params['risk'];
        $res = $userContact->save();

        if($res)
        {
            //添加消息通知
            addNotice('moving_brick_setting_success',$this->userId);
            $this->apiReturn('100', lang('do_success'), []);
        }
        $this->apiReturn('200', lang('do_error'), []);
    }

    /**
     * 邮箱验证
     */
    public function checkEmail(){
        $checkEmailC = tradenoa(15);
        $res = $this->user->where(['id'=>$this->userId])->update(['check_email_c'=>$checkEmailC]);
        $selfEmail = $this->user->where(['id'=>$this->userId])->value('email');

        $url = 'http://' . $_SERVER['SERVER_NAME'] . '/Login/checkEmail?lang=' . $this->params['lang'] . '&code=' . $checkEmailC;
        //发送邮件
        $content = lang('do_check_email') . '<a href="'. $url .'">'.$url . '</a>';
        if($res && sendEmailMeg($selfEmail,lang('check_title'),$content))
        {
            $this->apiReturn('100',lang('email_send_success'),[]);
        }
        $this->apiReturn('200',lang('email_send_error'),[]);
    }

    /**
     * 会员资料提交
     */
    public function personalSubmit(){
        if (!isset($this->params['password']) || !isset($this->params['sure_password']) || !isset($this->params['code'])) {
            $this->apiReturn('200', lang('data_exception'), []);
        }

        $megWhere['mobile'] = $this->moble;
        $megWhere['code'] = $this->params['code'];

        $sendTime = SmsLogs::where($megWhere)->order('time desc')->field('time,id,is_use')->find();
        if(!isset($sendTime)) //短信15分钟内有效
        {
            $this->apiReturn('200',lang('msg_error'),[]);
        }
        if($sendTime['is_use'] == 1)
        {
            $this->apiReturn('200',lang('msg_again_error'),[]);
        }
        if(strtotime($sendTime['time']) + 60*15 < time())
        {
            $this->apiReturn('200',lang('msg_overdue'),[]);
        }

        //修改该验证码状态
        $smsLog = new SmsLogs;
        $smsLog->save([
            'is_use' => 1,
        ],['id' => $sendTime['id']]);

        //获取用户手机号和邮箱
        $nowUserInfo = UserModel::where(['id'=>$this->userId])->field('moble,email,country')->find();

        if($this->params['password'] == "" || $this->params['sure_password'] == '' || $this->params['password'] != $this->params['sure_password'])
        {
            $this->apiReturn('200','请填写新密码正确!',[]);
        }

        $newPw = array();
        $newPw['rd'] = tradenoa();
        $newPw['pw'] = md5($newPw['rd'] . md5($this->params['password']) . $newPw['rd']);

        //重置密码
        $userPw = UserKey::where(['userid'=>$this->userId])->find();

        $userKey = UserKey::get($userPw['id']);
        $userKey->rd = $newPw['rd'];
        $userKey->pw = $newPw['pw'];
        $userKey->save();

        $user = $this->user; //设置状态
        $res = $user->save([
            'not_withdraw_time' => time() + 24*60*60,
        ],['id' => $this->userId]);

        if($res)
        {
            $this->apiReturn('100', lang('do_success'), []);
        }

        $this->apiReturn('200', lang('do_error'), []);
    }

    /**
     * 修改手机号码
     */
    public function personalChangeMobileSubmit(){
        if (!isset($this->params['phone']) || !isset($this->params['code'])) {
            $this->apiReturn('200', lang('data_exception'), []);
        }
        foreach ($this->params as $k => $v) {
            if ($v == '') {
                $this->apiReturn('200', lang('data_exception'), []);
            }
        }
        $megWhere['mobile'] = $this->params['phone'];
        $megWhere['code'] = $this->params['code'];

        $sendTime = SmsLogs::where($megWhere)->order('time desc')->field('time,id,is_use')->find();
        if(!isset($sendTime)) //短信15分钟内有效
        {
            $this->apiReturn('200',lang('msg_error'),[]);
        }
        if($sendTime['is_use'] == 1)
        {
            $this->apiReturn('200',lang('msg_again_error'),[]);
        }
        if(strtotime($sendTime['time']) + 60*15 < time())
        {
            $this->apiReturn('200',lang('msg_overdue'),[]);
        }

        //修改该验证码状态
        $smsLog = new SmsLogs;
        $smsLog->save([
            'is_use' => 1,
        ],['id' => $sendTime['id']]);

        //获取用户手机号
        $nowUserMobile = UserModel::where(['moble'=>$this->params['phone']])->find();
        if(isset($nowUserMobile) && count($nowUserMobile) > 0)
        {
            $this->apiReturn('200',"该手机号码已存在，请重新输入！",[]);
        }

        //设置新手机号码
        $user = $this->user;
        $saveData = [
            'moble' => $this->params['phone']
        ];

        $res = $user->save($saveData,['id' => $this->userId]);

        if($res)
        {
            $this->apiReturn('100', lang('do_success'), []);
        }

        $this->apiReturn('200', lang('do_error'), []);
    }

    /**
     * 发送邮箱验证
     */
    public function sendEmailCode(){
        $data = array();
        if (!isset($this->params['status']) || $this->params['status'] != 1) {
            $this->apiReturn('200', lang('data_exception'), []);
        }
        foreach ($this->params as $k => $v) {
            if ($v == '') {
                $this->apiReturn('200', lang('data_exception'), []);
            }
        }

        $data['newtoken']= $this->request->token();

        if(sendMobileMeg($this->moble))
        {
            $this->apiReturn('100','验证码短信发送成功！',$data);
        }

        $this->apiReturn('200','验证码短信发送失败！',$data);
    }

    /**
     * 发送新手机号码短信验证
     */
    public function sendMobileCode(){
        $data = array();
        if (!isset($this->params['status']) || $this->params['status'] != 1 || $this->params['phone'] == "") {
            $this->apiReturn('200', lang('data_exception'), []);
        }

        foreach ($this->params as $k => $v) {
            if ($v == '') {
                $this->apiReturn('200', lang('data_exception'), []);
            }
        }

        //手机号码验证
        if(!is_mobile_phone($this->params['phone']))
        {
            $this->apiReturn('200', lang('手机号码错误，请重新输入！'), []);
        }

        $data['newtoken']= $this->request->token();

        if(sendMobileMeg($this->params['phone']))
        {
            $this->apiReturn('100','验证码短信发送成功！',$data);
        }

        $this->apiReturn('200','验证码短信发送失败！',$data);
    }

    /**
     * 发送邮箱或者短信验证
     */
    public function sendUserCode(){
        $data = array();
        if (!isset($this->params['status']) || $this->params['status'] != 1) {
            $this->apiReturn('200', lang('data_exception'), []);
        }
        foreach ($this->params as $k => $v) {
            if ($v == '') {
                $this->apiReturn('200', lang('data_exception'), []);
            }
        }

        //用户等级判定
        if($this->userLevel == 0)
        {
            $this->apiReturn('200', lang('check_email_f'), []);
        }

        $data['newtoken']= $this->request->token();

        //判断用户是否是香港，是这手机短信验证
        $userCountry = $this->user->where(['id'=>$this->userId])->value('country');
        if($userCountry == '6') //6代表香港
        {
            if($this->moble == '')
            {
                $this->apiReturn('200', lang('write_moble'), []);
            }

            if(sendMobileMeg($this->moble))
            {
                $this->apiReturn('100',lang('moble_send_success'),$data);
            }

            $this->apiReturn('200',lang('moble_send_error'),$data);
        } else {
            if(sendEmailCode($this->userEmail))
            {
                $this->apiReturn('100',lang('email_send_success'),$data);
            }

            $this->apiReturn('200',lang('email_send_error'),$data);
        }
    }

}